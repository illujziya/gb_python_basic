# 2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на нуль. 
# Проверьте его работу на данных, вводимых пользователем. 
# При вводе пользователем нуля в качестве делителя программа должна корректно обработать эту ситуацию и не завершиться с ошибкой.

class MySuperHandyZeroDivisionError(ZeroDivisionError):
    def __str__(self):
        return "Даже не хочу на это делить. Только не 0"

class Divider():
    a: int
    b: int

    def __init__(self, a, b):
        self.a = int(a)
        self.b = int(b)

    @property
    def result(self):
        if self.b == 0:
            raise MySuperHandyZeroDivisionError()
        return self.a / self.b
            
        
a = 100
b = input("Введите число, на которое будем делить: ")
try:
    print(f"{a}/{b}={Divider(a,b).result}")
except Exception as ex:
    print("Ошибка поймана и обработана группой экспертов из 120 человек:", ex)

print("<-- если вы это читаете, значит программа все корректно обработала")


# результат запуска программы (ввод = 2):
# Введите число, на которое будем делить: 2
# 100/2=50.0
# <-- если вы это читаете, значит программа все корректно обработала

# результат запуска программы (ввод = 0):
# Введите число, на которое будем делить: 0
# Ошибка поймана и обработана группой экспертов из 120 человек: Даже не хочу на это делить. Только не 0
# <-- если вы это читаете, значит программа все корректно обработала

# результат запуска программы (ввод = сарделька!):
# Введите число, на которое будем делить: сарделька!
# Ошибка поймана и обработана группой экспертов из 120 человек: invalid literal for int() with base 10: 'сарделька!'
# <-- если вы это читаете, значит программа все корректно обработала